type RevoltConfig = components['schemas']['RevoltConfig'];
type RevoltFeatures = components['schemas']['RevoltFeatures'];
type CaptchaFeature = components['schemas']['CaptchaFeature'];
type Feature = components['schemas']['Feature'];
type VoiceFeature = components['schemas']['VoiceFeature'];
type BuildInformation = components['schemas']['BuildInformation'];
type Permission = components['schemas']['Permission'];
type UserPermission = components['schemas']['UserPermission'];
type Error = components['schemas']['Error'];
type Stats = components['schemas']['Stats'];
type Index = components['schemas']['Index'];
type IndexAccess = components['schemas']['IndexAccess'];
type ISO8601_Timestamp = components['schemas']['ISO8601 Timestamp'];
type CollectionStats = components['schemas']['CollectionStats'];
type LatencyStats = components['schemas']['LatencyStats'];
type LatencyHistogramEntry = components['schemas']['LatencyHistogramEntry'];
type QueryExecStats = components['schemas']['QueryExecStats'];
type CollectionScans = components['schemas']['CollectionScans'];
type User = components['schemas']['User'];
type AutumnFile = components['schemas']['AutumnFile'];
type Metadata = components['schemas']['Metadata'];
type Relationship = components['schemas']['Relationship'];
type RelationshipStatus = components['schemas']['RelationshipStatus'];
type UserStatus = components['schemas']['UserStatus'];
type Presence = components['schemas']['Presence'];
type UserProfile = components['schemas']['UserProfile'];
type BotInformation = components['schemas']['BotInformation'];
type Id = components['schemas']['Id'];
type FlagResponse = components['schemas']['FlagResponse'];
type DataEditUser = components['schemas']['DataEditUser'];
type UserProfileData = components['schemas']['UserProfileData'];
type FieldsUser = components['schemas']['FieldsUser'];
type DataChangeUsername = components['schemas']['DataChangeUsername'];
type Channel = components['schemas']['Channel'];
type OverrideField = components['schemas']['OverrideField'];
type MutualResponse = components['schemas']['MutualResponse'];
type DataSendFriendRequest = components['schemas']['DataSendFriendRequest'];
type Bot = components['schemas']['Bot'];
type DataCreateBot = components['schemas']['DataCreateBot'];
type InviteBotDestination = components['schemas']['InviteBotDestination'];
type PublicBot = components['schemas']['PublicBot'];
type FetchBotResponse = components['schemas']['FetchBotResponse'];
type OwnedBotsResponse = components['schemas']['OwnedBotsResponse'];
type DataEditBot = components['schemas']['DataEditBot'];
type FieldsBot = components['schemas']['FieldsBot'];
type DataEditChannel = components['schemas']['DataEditChannel'];
type FieldsChannel = components['schemas']['FieldsChannel'];
type Invite = components['schemas']['Invite'];
type Message = components['schemas']['Message'];
type MessageWebhook = components['schemas']['MessageWebhook'];
type SystemMessage = components['schemas']['SystemMessage'];
type Embed = components['schemas']['Embed'];
type Special = components['schemas']['Special'];
type LightspeedType = components['schemas']['LightspeedType'];
type TwitchType = components['schemas']['TwitchType'];
type BandcampType = components['schemas']['BandcampType'];
type Image = components['schemas']['Image'];
type ImageSize = components['schemas']['ImageSize'];
type Video = components['schemas']['Video'];
type Interactions = components['schemas']['Interactions'];
type Masquerade = components['schemas']['Masquerade'];
type DataMessageSend = components['schemas']['DataMessageSend'];
type Reply = components['schemas']['Reply'];
type SendableEmbed = components['schemas']['SendableEmbed'];
type BulkMessageResponse = components['schemas']['BulkMessageResponse'];
type Member = components['schemas']['Member'];
type MemberCompositeKey = components['schemas']['MemberCompositeKey'];
type MessageSort = components['schemas']['MessageSort'];
type OptionsMessageSearch = components['schemas']['OptionsMessageSearch'];
type OptionsQueryMessages = Omit<components['schemas']['OptionsMessageSearch'], 'query'> & {
	nearby?: string;
};
type OptionsQueryStale = components['schemas']['OptionsQueryStale'];
type DataEditMessage = components['schemas']['DataEditMessage'];
type OptionsBulkDelete = components['schemas']['OptionsBulkDelete'];
type DataCreateGroup = components['schemas']['DataCreateGroup'];
type CreateVoiceUserResponse = components['schemas']['CreateVoiceUserResponse'];
type Data = components['schemas']['Data'];
type Override = components['schemas']['Override'];
type DataDefaultChannelPermissions = components['schemas']['DataDefaultChannelPermissions'];
type Webhook = components['schemas']['Webhook'];
type CreateWebhookBody = components['schemas']['CreateWebhookBody'];
type CreateServerResponse = components['schemas']['CreateServerResponse'];
type Server = components['schemas']['Server'];
type Category = components['schemas']['Category'];
type SystemMessageChannels = components['schemas']['SystemMessageChannels'];
type Role = components['schemas']['Role'];
type DataCreateServer = components['schemas']['DataCreateServer'];
type FetchServerResponse = components['schemas']['FetchServerResponse'];
type DataEditServer = components['schemas']['DataEditServer'];
type FieldsServer = components['schemas']['FieldsServer'];
type DataCreateChannel = components['schemas']['DataCreateChannel'];
type ChannelType = components['schemas']['ChannelType'];
type AllMemberResponse = components['schemas']['AllMemberResponse'];
type DataMemberEdit = components['schemas']['DataMemberEdit'];
type FieldsMember = components['schemas']['FieldsMember'];
type MemberQueryResponse = components['schemas']['MemberQueryResponse'];
type ServerBan = components['schemas']['ServerBan'];
type DataBanCreate = components['schemas']['DataBanCreate'];
type BanListResult = components['schemas']['BanListResult'];
type BannedUser = components['schemas']['BannedUser'];
type NewRoleResponse = components['schemas']['NewRoleResponse'];
type DataCreateRole = components['schemas']['DataCreateRole'];
type DataEditRole = components['schemas']['DataEditRole'];
type FieldsRole = components['schemas']['FieldsRole'];
type DataSetServerRolePermission = components['schemas']['DataSetServerRolePermission'];
type DataPermissionsValue = components['schemas']['DataPermissionsValue'];
type Emoji = components['schemas']['Emoji'];
type EmojiParent = components['schemas']['EmojiParent'];
type InviteResponse = components['schemas']['InviteResponse'];
type InviteJoinResponse = components['schemas']['InviteJoinResponse'];
type DataCreateEmoji = components['schemas']['DataCreateEmoji'];
type DataReportContent = components['schemas']['DataReportContent'];
type ReportedContent = components['schemas']['ReportedContent'];
type ContentReportReason = components['schemas']['ContentReportReason'];
type UserReportReason = components['schemas']['UserReportReason'];
type Authifier_Error = components['schemas']['Authifier Error'];
type DataCreateAccount = components['schemas']['DataCreateAccount'];
type DataResendVerification = components['schemas']['DataResendVerification'];
type DataAccountDeletion = components['schemas']['DataAccountDeletion'];
type AccountInfo = components['schemas']['AccountInfo'];
type DataChangePassword = components['schemas']['DataChangePassword'];
type DataChangeEmail = components['schemas']['DataChangeEmail'];
type ResponseVerify = components['schemas']['ResponseVerify'];
type MFATicket = components['schemas']['MFATicket'];
type DataPasswordReset = components['schemas']['DataPasswordReset'];
type DataSendPasswordReset = components['schemas']['DataSendPasswordReset'];
type ResponseLogin = components['schemas']['ResponseLogin'];
type WebPushSubscription = components['schemas']['WebPushSubscription'];
type MFAMethod = components['schemas']['MFAMethod'];
type DataLogin = components['schemas']['DataLogin'];
type MFAResponse = components['schemas']['MFAResponse'];
type SessionInfo = components['schemas']['SessionInfo'];
type DataEditSession = components['schemas']['DataEditSession'];
type MultiFactorStatus = components['schemas']['MultiFactorStatus'];
type ResponseTotpSecret = components['schemas']['ResponseTotpSecret'];
type DataHello = components['schemas']['DataHello'];
type DataOnboard = components['schemas']['DataOnboard'];
type OptionsFetchSettings = components['schemas']['OptionsFetchSettings'];
type ChannelUnread = components['schemas']['ChannelUnread'];
type ChannelCompositeKey = components['schemas']['ChannelCompositeKey'];
type DataEditWebhook = components['schemas']['DataEditWebhook'];
type FieldsWebhook = components['schemas']['FieldsWebhook'];
type ResponseWebhook = components['schemas']['ResponseWebhook'];
